<launch>	
	        <!--  ************** Navigation ***************  -->
	        <!-- Map File -->
  	  <arg name="map_file" default="$(find navstack_pub)/maps/book_room.yaml"/>
  	
	<!-- Map Server -->
	  <!-- Publish: /map, /map_metadata -->
	  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />

	<arg name="gui" default="True" />
	<param name="use_gui" value="$(arg gui)"/>
	<param name="robot_description" command="cat $(find launch_jetson_nano_bot)/urdf/my_robot.urdf" />
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
	<!-- open port USB0 for Arduino -->
	<node pkg="rosserial_python" type="serial_node.py" name="serial_node">
	  <param name="port" value="/dev/ttyUSB0"/>
	  <param name="baud" value="57600"/>
	</node>
	<!-- Publish: /odom_data_euler, /odom_data_quat -->
  	<node pkg="localization_data_pub" type="ekf_odom_pub" name="ekf_odom_pub">
  	  <param name="publish_tf" value="true" />
    	  <param name="publish_rate" value="10.0" />
    	  <param name="linear_scale_positive" value="1.0" />
    	  <param name="linear_scale_negative" value="1.0" />
    	  <param name="angular_scale_positive" value="1.0" />
    	  <param name="angular_scale_negative" value="1.0" />
	  <param name="angular_scale_accel" value="0.0" />
  	</node> 
  	<!-- Lidar Data Publisher Using RPLIDAR from Slamtec -->
	  <!-- Used for obstacle avoidance and can be used for mapping --> 
	  <!-- Publish: /scan -->
	  <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
		  <param name="serial_port"         type="string" value="/dev/ttyUSB1"/>  
		  <param name="serial_baudrate"     type="int"    value="460800"/>
		  <param name="frame_id"            type="string" value="laser"/>
		  <param name="inverted"            type="bool"   value="false"/>
		  <param name="angle_compensate"    type="bool"   value="true"/>
		  <param name="scan_frequency"      type="double" value="10.0"/>
		  <param name="scan_mode"           type="string" value="Standard"/>
	  </node>
  	
	<node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
  	  	<rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
		<rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
		<rosparam file="$(find navstack_pub)/param/local_costmap_params.yaml" command="load" ns="local_costmap" />
		<rosparam file="$(find navstack_pub)/param/global_costmap_params.yaml" command="load" ns="global_costmap" />
  		<rosparam file="$(find navstack_pub)/param/dwa_local_planner_params.yaml" command="load" />

		<param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
		<param name="controller_frequency" value="5.0" />
		<param name="controller_patience" value="15.0" />

      		<param name="clearing_rotation_allowed" value="true" /> <!-- Nox is able to rotate in place -->
	</node>
	
</launch>
