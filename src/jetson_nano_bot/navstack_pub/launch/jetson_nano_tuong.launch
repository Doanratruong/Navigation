<launch>
<!-- Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames --> 
	  <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.06 0 0.08 0 0 0 base_link laser 30" />
	  <node pkg="tf" type="static_transform_publisher" name="imu_broadcaster" args="0 0.06 0.02 0 0 0 base_link imu 30" />
	  <node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0.09 0 0 0 odom base_link 30" />
	  <!-- odom to base_footprint transform will be provided by the robot_pose_ekf node -->
	  <!--<node pkg="tf" type="static_transform_publisher" name="base_footprint_to_odom" args="0 0 0.09 0 0 0 odom base_footprint 30" />-->
	  <!-- map to odom will be provided by the AMCL -->
	  <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 30" />

<!-- Wheel Encoder Publisher and Base Controller Using Arduino -->  
	  <!-- motor_controller_diff_drive_2.ino is the Arduino sketch -->	
	  <!-- Subscribe: /cmd_vel -->
	  <!-- Publish: x,y,z -->
	  <node pkg="rosserial_python" type="serial_node.py" name="serial_node">
	    <param name="port" value="/dev/ttyUSB0"/>
	    <param name="baud" value="57600"/>
	  </node>



<!-- Lidar Data Publisher Using RPLIDAR from Slamtec -->
	  <!-- Used for obstacle avoidance and can be used for mapping --> 
	  <!-- Publish: /scan -->
	  <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
		  <param name="serial_port"         type="string" value="/dev/ttyUSB1"/>  
		  <param name="serial_baudrate"     type="int"    value="460800"/>
		  <param name="frame_id"            type="string" value="laser"/>
		  <param name="inverted"            type="bool"   value="false"/>
		  <param name="angle_compensate"    type="bool"   value="true"/>
		  <param name="scan_frequency"      type="double" value="10.0"/>
		  <param name="scan_mode"           type="string" value="Standard"/>
	  </node>
	  
<!-- Extended Kalman Filter from robot_pose_ekf Node-->
	  <!-- Subscribe: /odom, /imu_data, /vo -->
	  <!-- Publish: /robot_pose_ekf/odom_combined -->
	  <node name="ekf_odom_pub" pkg="localization_data_pub" type="ekf_odom_pub">
	  	<param name="publish_tf" value="true"/>
	  	<param name="publish_rate" value="10.0"/>
	  	<param name="linear_scale_positive" value="1.0"/>
	  	<param name="linear_scale_negative" value="1.0"/>
	  	<param name="angular_scale_positive" value="1.0"/>
	  	<param name="angular_scale_negative" value="1.0"/>
	  </node>
	  
<!-- Initial Pose and Goal Publisher -->
	  <!-- Publish: /initialpose, /move_base_simple/goal -->
	  <node pkg="rviz" type="rviz" name="rviz" args="-d /home/catkin_ws/src/jetson_nano_bot/navstack_pub/maps/Tang2_khuA_map.rviz">
	  </node> 
	  
 <!-- Subscribe: /initialpose, /move_base_simple/goal -->
	  <!-- Publish: /initial_2d, /goal_2d --> 
	  <node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d">
	  </node>   
	  
<!-- Map File -->
  	<arg name="map_file" default="$(find navstack_pub)/maps/Tang2_khuA_map.yaml"/>
  	
<!-- Map Server -->
	  <!-- Publish: /map, /map_metadata -->
	  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />
	  
	  
<!-- Add AMCL example for differential drive robots for Localization -->
  <!-- Subscribe: /scan, /tf, /initialpose, /map -->
  <!-- Publish: /amcl_pose, /particlecloud, /tf -->
  <include file="/opt/ros/noetic/share/amcl/examples/amcl_diff.launch"/>
  
  
<!-- Move Base Node -->
	<!-- Subscribe: /move_base_simple/goal -->
	<!-- Publish: /cmd_vel -->
	<node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
	    <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
	    <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
	    <rosparam file="$(find navstack_pub)/param/local_costmap_params.yaml" command="load" ns="local_costmap" />
	    <rosparam file="$(find navstack_pub)/param/global_costmap_params.yaml" command="load" ns="global_costmap" />
	    <rosparam file="$(find navstack_pub)/param/base_local_planner_params.yaml" command="load" />
	  </node>	  
	  
	  
</launch>
