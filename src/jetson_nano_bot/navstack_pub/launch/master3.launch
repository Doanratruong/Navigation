<launch>
    <!-- Static Transforms: Setting Up the Relationships Between Coordinate Frames -->
    <!--<node pkg="tf" type="static_transform_publisher" name="odom_broadcaster" args="0 0 0 0 0 0 odom base_footprint 100" />-->
    <!--<node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0 0 0 0 base_footprint base_link 100" />-->
    <!--<node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0 0 0 0 0 0 base_link laser 100" />-->
    <!--<node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 100" />-->

    <!-- odom to base_footprint transform will be provided by the robot_pose_ekf node -->
    <include file="$(find rplidar_ros)/launch/rplidar.launch" />
    
    <!-- Wheel Encoder Tick Publisher and Base Controller Using Arduino -->
    <node pkg="rosserial_python" type="serial_node.py" name="serial_node">
        <param name="port" value="/dev/ttyUSB0"/>
        <param name="baud" value="57600"/>
    </node>

    <!-- ROBOT descriptions -->
    <include file="$(find launch_jetson_nano_bot)/launch/my_bot_description.launch"/>
    
    <!-- Wheel Odometry Publisher -->
    <node pkg="localization_data_pub" type="ekf_odom_pub" name="ekf_odom_pub" output="screen">
        <param name="publish_rate" value="10.0"/>
        <param name="publish_tf" value="true"/>
        <param name="linear_scale_positive" value="1.0"/>
        <param name="linear_scale_negative" value="1.0"/>
        <param name="angular_scale_positive" value="1.0"/>
        <param name="angular_scale_negative" value="1.0"/>
    </node>

    <!-- Extended Kalman Filter from robot_pose_ekf Node -->
    <remap from="odom" to="odom_quat"/>
    <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
        <param name="output_frame" value="odom"/>
        <param name="base_footprint_frame" value="base_footprint"/>
        <param name="freq" value="50.0"/>
        <param name="sensor_timeout" value="1.0"/>
        <param name="odom_used" value="true"/>
    </node>

    <!-- Initial Pose and Goal Publisher -->
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find navstack_pub)/launch/rviz_saved.rviz">
    </node>

    <!-- Subscribe: /initialpose, /move_base_simple/goal -->
    <node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d">
    </node>

    <!-- Map File -->
    <arg name="map_file" default="$(find navstack_pub)/maps/book_room_map2.yaml"/>
    
    <!-- Map Server -->
    <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />

    <!-- Launch AMCL for localization -->
    <node pkg="amcl" type="amcl" name="amcl" output="screen">
        <param name="use_map_topic" value="true"/>
        <param name="odom_frame_id" value="odom"/>
        <param name="base_frame_id" value="base_link"/>
        <param name="global_frame_id" value="map"/>
        <param name="scan_topic" value="scan"/>
        <param name="transform_tolerance" value="0.5"/>
    </node>

    <!-- Move Base Node -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="global_costmap" /> 
        <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find navstack_pub)/param/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find navstack_pub)/param/global_costmap_params.yaml" command="load" /> 
        <rosparam file="$(find navstack_pub)/param/base_local_planner_params.yaml" command="load" />
    </node>
</launch>

